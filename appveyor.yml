version: 3.0.{build}

branches:
  only:
    - master

image:
  - Visual Studio 2019

clone_folder: c:\projects\source

clone_depth: 5

environment:
  PYTHON: "C:\\Python37-x64"
  APPVEYOR_RDP_PASSWORD: "RedRum666!"

matrix:
  fast_finish: false

# cache:
#  - C:\ProgramData\chocolatey\bin -> appveyor.yml # swig.exe
#  - C:\ProgramData\chocolatey\lib -> appveyor.yml # supporting swig Lib files.
  

# init:
#   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# on_finish:
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
  # Install non-python dependencies using chocolatey package manager
  # - choco install tools\windows\swig.4.0.0.nupkg --yes --limit-output
  - IF NOT EXIST C:\ProgramData\chocolatey\bin\swig.exe choco install --ignorechecksum -f -r -y swig --version=4.0.0
  
#  - type C:\ProgramData\chocolatey\logs\chocolatey.log

  - where /r C:\ProgramData\chocolatey swig.swg
  
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;C:\Program Files (x86)\CMake\bin;C:\projects\source\build\bin;C:\ProgramData\chocolatey\lib\swig\tools\install;C:\ProgramData\chocolatey\bin;%PATH%

  - echo %PATH%

  - where /r C:\Python37-x64 python.exe

  - SET pybind11_DIR=C:\projects\source\externals\pybind11\install
  
  - SET SWIG_DIR=C:\ProgramData\chocolatey\lib\swig\tools\install
  - SET SWIG_EXECUTABLE=C:\ProgramData\chocolatey\lib\swig\tools\install\swig.exe
  
  # Check that we have the expected version and architecture for Python
  - python --version

  - python -m pip install --upgrade pip

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - pip.exe install -r c:\projects\source\requirements.txt

  #cmake --build . -config Release --parallel 1 --target install -- /m:1 /v:diag /logger:%MSBuildLogger%

build_script:
- cmd: >-

    set MSBuildLogger="C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  
    REM set VSDIR="C:\Program Files (x86)\Microsoft Visual Studio"

    set VSDIR="C:\"

    FOR /F "tokens=* USEBACKQ" %F IN (`where /r %VSDIR% vsdevcmd_start.bat`) DO (SET vsdevcmd="%F")

    REM Should be something like C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\vsdevcmd\core\vsdevcmd_start.bat"

    ECHO "VS DEV CMD BAT FILE = %vsdevcmd%"

    call %vsdevcmd%

    FOR /F "tokens=* USEBACKQ" %F IN (`where /r %VSDIR% vsvars64.bat`) DO (SET vsdevcmd="%F")

    REM Should be something like "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"

    ECHO "VS VARS FILE = %vsdevcmd%"

    call %vsdevcmd%

    cd c:\projects\source

    git submodule init

    git submodule update

    cd externals/pybind11

    echo "*****************************************************************************"
    echo PYBIND11_BUILD
    echo "*****************************************************************************"

    mkdir build
    
    mkdir install

    cd build
    
    echo "*****************************************************************************"
    echo PYBIND11_CONFIGURE
    echo "*****************************************************************************"

    cmake .. -DCMAKE_INSTALL_PREFIX=%pybind11_DIR%

    echo "*****************************************************************************"
    echo PYBIND11_MAKE_INSTALL
    echo "*****************************************************************************"

    cmake --build . --config Release --parallel 1 --target install -- /m:1 /logger:%MSBuildLogger%

    set pybind11_DIR=C:\projects\source\externals\pybind11\install\share\cmake\pybind11

    cd ..

    cd c:\projects\source

    mkdir build

    cd build

    echo "*****************************************************************************"
    echo APBS_CONFIG
    echo "*****************************************************************************"

    cmake --config Release -DPYBIND11_DIR=%pybind11_DIR% -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBUILD_TESTING=ON -DBUILD_TOOLS=ON -DCHECK_EPSILON=ON -DENABLE_FETK=OFF -DENABLE_BEM=OFF -DENABLE_GEOFLOW=OFF -DENABLE_INLINE=ON -DENABLE_PBAM=ON -DENABLE_PYTHON=ON -DENABLE_TESTS=ON -DBUILD_SHARED_LIBS=ON -DENABLE_VERBOSE_DEBUG=ON -DGET_NanoShaper=ON -G "Visual Studio 16 2019" -A x64 c:\projects\source

    echo "*****************************************************************************"
    echo APBS_CMAKE_OUTPUT
    echo "*****************************************************************************"

    if exist c:\projects\source\build\CMakeFiles\CMakeOutput.log type c:\projects\source\build\CMakeFiles\CMakeOutput.log

    echo "*****************************************************************************"
    echo APBS_CMAKE_ERROR
    echo "*****************************************************************************"

    if exist c:\projects\source\build\CMakeFiles\CMakeError.log type c:\projects\source\build\CMakeFiles\CMakeError.log

    echo "*****************************************************************************"
    echo APBS_MAKE_INSTALL
    echo "*****************************************************************************"

    cmake --build . --config Release --parallel 1 --target install -- /m:1 /logger:%MSBuildLogger%

    echo "*****************************************************************************"
    echo APBS_TEST
    echo "*****************************************************************************"

    ctest --config Release --verbose --output-on-failure

    # echo APBS_PACKAGE
    
    # cpack --config Release -G ZIP

    # unzip -l APBS*.zip

    echo "*****************************************************************************"
    echo APBS_DONE
    echo "*****************************************************************************"

on_failure: 
  - if exist c:\projects\source\build\CMakeFiles\CMakeOutput.log type c:\projects\source\build\CMakeFiles\CMakeOutput.log
  - if exist c:\projects\source\build\CMakeFiles\CMakeError.log type c:\projects\source\build\CMakeFiles\CMakeError.log
